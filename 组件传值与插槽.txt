1兄弟传值
1创建bus.js
import Vue from 'vue'
export default new Vue()
2在哥,弟组件中引入 import bus from bus.js
3弟组件中发送值
this.$emit('AAA',this.name);
哥组件中在created中接收
created(){
bus.on('AAA',nm=>{
//nm 参数为接收到的值
userinfo.name = nm
})
}

2父子传值
1.父给子传值
1引入子组件import
2利用子组件的引入名称作为标签名
3父组件通过子组件中的定义属性值传值
<common yan:blue>

子组件中
1利用props接收传入的值
props:{
yan:{
type:''//传入类型
default:''//默认值
}
}
2将传入的值导入
<button :style='{color:yan}'>


3父子传值
2.子给父传值:
子组件中:
1添加按钮或者能够触发事件
<button @click='toFather'>
2在methods中使用$emit定义toFather
toFaher(){
this.$emit('toFather','hahha')
}

父组件中:
1引入子组件
2使用子组件的引入名字作为标签名
3在标签中使用@定义方法,@为子组件的点击事件,@toFather='show'
4在methods中注册事件
methods{
show(data){
this.message=data;
//data为hahaha就是子组件中传过来的值
//可以将其赋值给data成员
}
}
另一种写法
子:<button @click=''$emit('btn','啤酒')'>
父:<son-com @btn='buttonHandler'>
methods(){
buttonHandler(val){
console.log(val)
}
}






父传子:所有的样式事件在自己身上定义(父亲),子只相当于一个模板
子传父:要传的数据需要在子组件身上写好,父亲只负责接收

4插槽
子组件
<slot a='10' b='20' row = '每条文章记录信息是一个对象里边有各个成员'></slot>

父组件
<子组件>
<标签 slot-scope='stData'>{{stData.a}}------{{stData.row}}


4.update固定格式:
通过updatexxx的方式给子组件声明事件
父组件
<com-button :yan='co' @update:yan='data=>{co=data}'></>
子组件
<button :@click='$emit('update:yan','green')'>

5.通过 :yan.sync='co'/相当于把@update:yan='data=>{co=data}' 进行封装
<com-button :yan.sync='co'></com-button>
子组件
<button @click='$emit('update:yan','green')'>

6关于element中的插槽
个人理解
给el-table-column标签中加个slot-scope属性 slot-scope='stData' stData中存放的就是prop的属性 在slot的row插槽中
之后在其中加个span标签  span要想获取子插槽中的属性就必须调用stData.row属性




