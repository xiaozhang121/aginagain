37.jQuery中最慢的选择器？
ID选择器是速度最快的，因为它使用JavaScript的内置函数getElementById();
其次是类型选择器,它使用的是JavaScript的内置函数getElementByTag();
速度最慢的是Class选择器,其需要通过分析HTML文档树,并且需要在浏览器内核外递归,这种递归遍历时无法被优化的;

38.Viod(0)有什么用?
用法:<a href:'JavaScript:void(0)' onClick='xxxx(xxx)'>
阻止事件的传播 函数中return false 页面不进行跳转
 
39.哪些关键字处理JavaScript异常?
JavaScript的异常处理关键字有三个:try,catch,throw
try:包含可能出错的js语句
catch:捕获出现的错误
throw:创建自定义错误

40.JavaScript中的严格模式是什么?如何启用它?
即在严格模式中运行,消除JavaScript语法的一些不合理,不严谨之处,减少一些怪异行为
使用严格模式 只需要添加'user strict' 可以放在脚本的开头 或者函数内的表达式
(1)在全局代码的开始出加入
<script>
'use strict'
</script>
(2)在函数声明代码开始出加入
function strict(){'use strict'}

41.JavaScript有哪几种数据类型
(1)基本数据类型:字符串类型(string),数字类型(number),布尔类型(boolean)
(2)复杂类型:数组类型(array),对象类型(object),函数类型(function),正则类型(regexp)
(3)空类型:undefined,null

42.Ajax readyState有五种状态 分别是0,1,2,3,4,说明下他们对应的意思?
readyState是XMLHttpRequest(Ajax请求的对象)对象的一个属性,用来表示当前XMLHttpRequest对象处于什么状态
0:未初始化状态,此时已经创建了一个XMLHttpRequest对象
1:准备发送状态,此时已经调用了XMLHttpRequest对象的open方法,并且XMLHttpRequest对象已经准备好将一个请求发送到服务器端
2:已经发送状态,此时已经通过send方法把一个请求发送到服务器端,但是还没有收到一个响应
3:正在接受状态,此时已经接收到HTTP响应头信息,但是消息体部分还没有完全接受到
4:完成响应状态,此时已经完成了HTTP响应的接收
总体概括:0创建 1准备 2发送请求  /  3接收到响应头 4完全接收

1.mvc和mvvm的差别?
model:模型,是应用程序中用于处理应用程序逻辑的部分,通常模型对象负责在数据库中存取数据;
view:视图,是应用程序中处理数据显示的部分,通常视图是根据模型数据创建的;
controller:控制器,是用于程序中处理用户交互的部分,通常控制器负责从视图读取数据,控制用户输入,并向模型发送数据

viewmodel:就是与view界面对应的model,因为数据库结构往往不能直接跟界面控件一一对应上,所以需要再定义一个数据对象专门对应view上的控件,viewmodel的职责就是把model对象封装成可以显示和接收输入的界面数据对象
区别:
mvc:
mvc允许在不改变视图的情况下,改变用户对视图输入的响应方式,用户的view操作交给了controller处理,在controller中响应view的事件调用model的接口对数据进行操作,只要model发生变化就响应给相关的视图进行更新操作
如果使用原生的html+css+js比喻的话,用户通过html(view)操作,js(controller)通过事件监听,监听到view的变动,然后通过ajax(model)进行数据交互(向服务器端的接收和发送),随即更新数据
mvvm:
mvvm与mvc模型最大的区别就是实现了view和model的自动更新,也就是说mdel的属性发生改变时,我们不再手动挡操作dom,而是改变之后的属性对应的view层会自动发生改变.因为在mvvm中view不知道model的存在,model和viewmodel也观察不到view,这种低耦合模式提高代码的可重用性.典型的对应的框架:vue
在vue的模板语法中,可以通过双向数据绑定来将html(model)的双向数据绑定viewmodel在组件的data中,当捕捉到model层中的数据变化时view也会发生变化,同时view中的数据发生变化时,model中的数据也会发生变化.

2.Vue-router有哪几种导航钩子?
导航钩子即导航守卫
(1)全局前置守卫:router.beforeEach /当一个导航触发时,全局前置守卫按照创建顺序调用(参数:to,from,next/设置默认登录首页使用)
(2)全局解析守卫:router.beforeResolve /在导航被确认之前,同时在所有的组件内守卫和异步路由组件被解析之后,解析守卫就被调用
(3)全局后置钩子:router.afterEach 
(4)路由独享的守卫:beforeEnter /与全局前置守卫的方法参数相同
(5)组件内的守卫:beforeRouterEnter,beforeRouteUpdate,beforeRouteLeave

3.v-model是什么,怎么使用?
v-model实现标签数据的双向绑定,根据控件类型自动选取正确的方法来更新元素,其实他就是一个语法糖,这个背后就做了两个操作:
v-bind绑定一个value属性,v-on指令给当前元素绑定input事件
<input v-model='test'> 本质上是<input :value='test' @input='test=$event.target.value'>
其中@input是对input输入事件的一个监听,:value='test'是将监听事件中的数据放入input 

4.vue中标签怎么绑定事件?
使用<v-on:事件名=函数名>完成,这里的函数名是定义在vue实例中的methods对象中,vue实例可以直接访问其中 方法
<button v-on:click='alert(1)'>
简写<button @click='alert(1)'>

5.简述vue的声明周期:
beforeCreated:实例组件创建,元素DOM和数据还没有初始化,暂时不能在这个周期里面进行生命操作;
created:数据data初始化完成,方法也已经可以调用,但是DOM未渲染;
beforeMount:DOM未完成挂载,数据初始化完成,但是数据的双向绑定还是显示{{}},这是因为采用了Virtual DOM(虚拟Dom)技术先占了一个坑
mounted:数据和DOM都完成挂载,在上一个周期占位的数据把值渲染进去,这个周期适合执行初始化需要操作DOM的方法
beforeUpdate:只要是页面数据改变了都会触发,数据更新之前,页面数据还是原来的数据,当请求赋值一个数据的时候回执行这个周期,如果没有数据改变不执行
updated:只要是页面数据改变了都会触发,数据更新完毕,页面数据是更新之后的,要谨慎使用因为页面数据更新就会触发,很影响性能容易死循环
beforeDestroy:在组件销毁之前执行,类似路由钩子都是在路由离开的时候执行,不过beforeDestroy无法阻止路由跳转但是可以做一些路由离开的操作,因为这个周期里面还可以使用data和methods,比如一个倒计时组件,如果在路由跳转的时候没有清除,这个定时器还是在的,这时候就可以在这个里面清除定时器
Destroyed:销毁

6.父组件如何传值给子组件?
(1)引入子组件的import
(2)利用子组件的引入名称作为标签名
(3)父组件通过子组件的定义的属性值传值
<common yan:blue>
(4)子组件中利用props接收传入的值
props:{
yan:{
type:'',//传入类型
defult:''//默认值
}
}
(5)将传入值导入
<button :style='{color:yan}'>

7.keep-alive是什么,有什么作用?
keep-alive是用来缓存组件,避免多次加载相应的组件,减少性能消耗,简单来说就是从页面1调到页面2后在后退回页面1不需要重新执行页面1的代码,只会从缓存中加载之前已缓存的页面1,这样可以减少加载时间及性能消耗,提高用户体验;
使用:
(1)router.js 在路由中配置文件,继续从a跳到b,再从b返回a,缓存a的页面,name在a的path中添加meta:{ keepAlive : true }
(2)App.vue 
//如果有缓存则使用缓存
<div id='app'>
<keep-alive>
<router-view v-if='$route.meta.keepAlive'></router-view>
</keep-alive>
<router.view v-if='!$route.meta.keepAlive'>
</div>
(3)a.vue 
beforeRouteLeave(to,from,next){
//如果从a跳到b页面那么缓存a页面,如果a跳到其他页面则不缓存a页面
if(to.name !=='a'){
this.$route.meta.keepAlive=false
}else{
this.$route.meta.keepAlive=true
}
}

8.子组件如何传值给父组件?
(1)子组件中
<button @click='toFather'>.
在methods中使用$emit定义toFather
toFather(){
this.$emit('toFather','传给父的字符')
}
(2)父组件中
引入子组件
子组件作为标签名
在标签中定义方法@toFater='show'
在methods中定义
methods:{
show(val){
//val就是子穿过来的值 可以将其赋值给data成员
this.message = val
}
}

9.v-model是什么?怎么使用?vue中变怎么绑定事件?
数据双向绑定,在标签中加上v-model然后在data成员中定义,此时改变界面上的值data成员也会发生改变,改变data成员的值界面上的显示也会发生改变;
vue通过v-on绑定事件,之后在methods中定义事件方法

10.说出至少四种vue当中的指令和它的用法?
v-if:是条件渲染指令,根据表达式的真假来删除或者插入元素
v-show:与v-if用法基本一致,不过是通过改变元素的css display属性来决定元素是显示还是隐藏
v-for:遍历数组来进行渲染
v-bind:用来动态的绑定一个或多个特性/单项绑定
v-model:data与界面双向绑定

11.vue的双向数据绑定原理?
Vue内部通过Object.defineProperty方法属性拦截的方式,把data对象里每个数据的读写转化成为getter/setter,当数据变化的时候通知视图更新;

12.v-show和v-if指令的共同点和不同点?
相同点:
v-show和v-if都能控制元素的显示和隐藏
不同点:
(1)编译区别,v-if数真正的条件渲染,因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建
(2)实现本质的方法不同,v-show本质是通过设置css的display为none控制隐藏/v-if是动态的向DOM树内添加或删除DOM元素
(3)编译条件:v-show都会编译,初始值为false只是将display设置为none,但是也编译了.v-if为false就不会编译
(4)性能:v-show只编译一次,后面就是控制css.v-if不停的销毁创建,所以v-show性能好些;
(5)频繁切换节点时使用v-show,不需要频繁切换时使用v-if

13.在VUE中使用插件的步骤?
(1)npm install xxx //安装插件包
(2)import xx form 'xxxx' //引入插件
Vue.use(xx)

14.请列举出三个vue中常用的生命周期钩子函数?
created:数据data初始化完成,方法也已经可以调用,但是DOM未渲染;(html没有渲染出来 所以无法操作DOM节点)
beforeMount:DOM未完成挂载,数据初始化完成,但是数据的双向绑定还是显示{{}},这是因为采用了Virtual DOM(虚拟Dom)技术先占了一个坑
mounted:数据和DOM都完成挂载,在上一个周期占位的数据把值渲染进去,这个周期适合执行初始化需要操作DOM的方法(html已经渲染出来所以可以操作DOM)

15.FileReader H5新特性
需求:图片先本地预览之后在上传至服务器
1首先在el-upload中定义:on-change='imgSavetoUrl'
2在date成员中定义变量localFile:{}
3声明方法
imgSavetoUrl(event){
this.localFile = event.raw
let reader = new FileReader()//创建新的FileReader对象-转换64base码
reader.readAsDataURL(this.localFile)//上传转换对象

reader.onload=()=>{
//转换成功后 reader.result即为转换后的DataURL
this.loaclFile = reader.result
}
}


















