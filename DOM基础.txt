1.---------------------------------------------------------------------
onfocus-鼠标聚焦
onblur-鼠标失焦
没有设置transition过度 triansform不生效

//获取minvalue - maxvalue之间的随机数
Math.random()*(maxValue - minValue+1)+minValue
2.---------------------------------------------------------------------
div.className +=" 类名";
向有类名的元素中再添加类名;
缺点:重复添加/删除不好做;
3.---------------------------------------------------------------------
判断是否存在 如果存在则不添加,不存在则创建(百度搜索项目);
4.----------------------------------------------------------------------

********************************************************************************************************************操作类名用此方法
.classList管理类名(方法 集合)

.add("添加类名");
box.classList.add("类名");重复添加也只能添加一次;多个类名,隔开;

.remove("删除类名");

*******************************************************************************.toggle("切换类名"); 没有类名添加类名,有类名则删除该类名;

5.----------------------------------------------------------------------
style属性只能设置在行内

********************************************************************************************************************专业名词及其概念:
DOM:document object对象;
BOM:browser object;
浏览器对象:window对象(顶级对象);
所有的全局变量和函数都是window的属性和方法

节点:HTML结构标签,在js中叫节点,叫DOM节点;本质是个对象;

对象:属性和方法的集合体;

方法:函数;

事件对象:形参,注册事件后面的函数内部的形参
6.----------------------------------------------------------------------
<span id="span" data-自定义属性的名字= "存放对应的img地址">
img.src = this.dataset.(自定义属性点 名字);

**被.getAttribute();取代**
7.----------------------------------------------------------------------
document.querySelector();css选择器//一次只能获取单个标签
document.querySelectorAll();//一次获取多个标签
代替byId/className
8.----------------------------------------------------------------------
获取属性/侧重于自定义属性:
var a = box.getAttribute("自定义属性");
参数:传入查询的自定义属性名称
返回:查询结果自定义属性的值;

设置属性:
var b = box.setAttribute("aa","+++");;
参数:第一个自定义属性名,第二个自定义属性值
没有返回值;

移除属性:
var c = box.removeAttribute("自定义属性名")

获取所有属性:
var d = btn.getAttributeNames();
获取的是一个数组,里面包含的是所有的属性名;
9.-------------------------------------------------------------------------
为元素注册多个事件(防止功能覆盖):
btn.addEvenListener("click","function(){alert(1);}")
参数:事件类型(click,没有on);/事件执行函数(匿名函数);
10.------------------------------------------------------------------------

********************************************************************************************************************事件冒泡与捕获(难点)
事件执行阶段三个阶段:

html-body-btn

1.捕获:从根部节点(html)一层一层往里找(body),直到找到我们刚才触发的那个节点(btn),这个过程叫捕获;
2.到达目标:找到刚才触发的那个节点;
3.冒泡:从找到的目标节点,一层一层往根节点传递点击信号,这个过程叫冒泡;

点击btn后,信号从根部一层一层捕获btn目标节点,发现btn刚好注册了点击事件,事件执行完毕,信号冒泡回到根节点;

*******************************************************************************************************************事件默认在冒泡阶段执行的
在冒泡阶段,发现父级节点也注册了事件,这些事件函数也会被执行;

为什么事件默认是在冒泡阶段执行(用户可直接获取自己点击的);

box_3.addEventListener("click", function () {console.log(3);},true);
在第三个参数上面加 true 改为在捕获阶段执行(用户体验极差);
默认第三参数为false;

*******************************************************************************************************************阻止时间冒泡

传入形参(e);
e:时间对象;//event.,
再传入方法: e.stopPropagation();停止传播,阻止冒泡行为,事件在冒泡阶段不执行;

box_3.addEventListener("click", function (e) {console.log(3) e.stopPropagation();},true);

11.-------------------------------------------------------------------------------

********************************************************************************************************************事件对象
描述鼠标位置的属性;
e.clientX/e.clientY:相对于可视窗口的左上角为基准点;
e.pageX/e.pageY:相对于body左上角为基准点;

 var b = document.querySelector(".box_1");
        b.onclick = function (e) {
            console.log(e.currentTarget);
        }
e.target:触发是谁就是谁;target:目标;//可显示注册事件元素的所有子元素的触发事件;//DOM节点(可以.属性名字)

e.currentTarget:事件注册给谁就是谁;//只可显示注册事件元素的触发事件;==this;

12.--------------------------------------------------------------------------------

********************************************************************************************************************阻止默认行为
鼠标右键事件:
e.preventDefault();阻止鼠标右键行为:右键弹窗;
document.oncontextmenu = function(e) {
	alert(1);
	e.preventDefault();
}

a标签默认行为:跳转
阻止默认行为:
a.onclick = function(e) {
	e.preventDefault();
}

13.--------------------------------------------------------------------------------
获取/设置HTML结构:
ul.innerHTML();
修改: ul.innerHTML = "<li></li>";
添加: ul.innerHTML += "<li></li>";
14.---------------------------------------------------------------------------------
******************************************************************************************************************事件委托(非常重要)***************************************************************************************************************************************
1.不是给子元素注册事件 
2.给父级元素注册事件 
3.事件默认在冒泡阶段执行,点击子元素,冒泡到父级上,父级的事件也会触发

console.log(e.target.nodeName);
当前点击的节点名;
需要给动态创建的元素实现注册效果的时候使用

子元素添加 如果当时有还没创建的子元素 则该子元素创建之后不会继承该方法 需要重新遍历设置方法 浪费性能

给父元素添加 通过事件冒泡 会涉及到所有的子元素 此时在通过e.target获取此时点击的子元素 设置判断条件 则会使
所有需要的子元素都得到该方法

var del = document.querySelectorAll("span");
  //获取删除按钮 点击之后使用remove移除li标签

  for (var i = 0; i < del.length; i++) {
    del[i].onclick = function (e) {
      e.target.parentNode.remove();
    }
  }-----------------------------------------------需要遍历多次 浪费性能

ul.onclick = function (e) {
    if (e.target.nodeName == "SPAN") {
      e.target.parentNode.remove();
    }
  }-----------------------------------------------事件委托 通过给父元素注册点击事件 使所有的子元素都获取该事件 最后通过筛选得到最终所需元素带有所需方法


15.---------------------------------------------------------------------------------
DOM.nodeName 返回当前点击的大写的标签名;

console.log(ul.nodeName);
 
var uu = document.querySelector("#uu");
        uu.onclick = function (e) {
            if (e.target.className == "son") {
                alert(1)
            }
        }

16.---------------------------------------------------------------------------------
 
***************************************************************************************************************参数e MouseEvent(难点!!)*********************************************************************************************************************************
鼠标事件
function (e) {
e.target
}
此时鼠标点击的节点
返回值为大写的标签名!!!!!!!!!!!!!!!!!!!!!!!
17.---------------------------------------------------------------------------------
mousedown:鼠标按下的时候触发;
mouseup:鼠标抬起的时候触发;
mousemove:鼠标在元素上移动的时候触发;
跟鼠标相关的事件必须使用参数e!!!!!!!!!!!!!!!!!!!!!!!!!

18.---------------------------------------------------------------------------------
.style.left;只能获取行内样式;

获取css中的属性需要使用 offset;

***************************************************************************************************************与有***定位的父级元素***的水平距离和垂直距离:
元素.offsetLeft;
元素.offsetTop;
元素.offsetParent;返回有定位的父亲

margin会影响定位;

19.-----------------------------------------------------------------------------------
**************************************************************************************************************开关思想:
声明一个变量,通过代码控制变量的不同情况;
if (key==false) {
return;
}
弊端:可通过控制台更改true多次进行;

20.------------------------------------------------------------------------------------
**************************************************************************************************************事件解绑:

(1).
btn.onclick = function() {
console.log(1)
//事件解绑
btn.onclick = null;
};
(2).
btn.removeEventListener("click",function fn(){
console.log(1)
只注销自己的事件
btn.removeEventListener("click",fn);
});

????开关思想的弊端-解绑事件解决???

21.--------------------------------------------------------------------------------------
添加DOM节点的方式:
var li = document.createElement("dv");创建DOM节点,并没有添加到盒子当中;
li.innerText = "----------";
**********************ul.appendChild(li);指定一个父级DOM节点,从后面添加一个子DOM节点;

insertBefore(新的子元素,旧的子元素);

***********************ul.insertBefore(li,旧的子元素);添加到旧的子元素的前面

22.------------------------------------------------------------------------------------
.parentNode 找到父亲元素 没有->body;
.nextElementSibling 找到下一个兄弟元素
.previousElementSibling 找到上一个兄弟元素
23.------------------------------------------------------------------------------------
不用var a声明的变量是隐式全局变量;
a = 1;(隐式全局变量)
24.------------------------------------------------------------------------------------
window.onload;页面静态资源(css文件,img文件...)加载完毕时才会执行;
使用场景(页面中有图片,使用window.onlo把所有的代码包起来);
window.onload = function() {
};
25.------------------------------------------------------------------------------------
定时器是属于window上的方法;1s = 1000ms;
setTimeout(执行函数,倒计时(默认单位(ms))):一次性定时器;倒计时多少秒后开始执行;
返回值number值,用于清除定时器;一般叫做timer(工作中习惯);
clearTimeout(timer);清除定时器/清除倒计时

interval间隔
setInterval永久性定时器

26.-------------------------------------------------------------------------------------
window.location.href
27.-------------------------------------------------------------------------------------
************************************************************************************************************************************localStorage 本地存储
localStorage 本地存储/window属性名/相当于浏览器自带的小u盘20M;

本地指浏览器缓存;
localStorage.setItem(键/位置,值/JSON字符串);
返回值:读取的位置
存入本地哪个字段内/可在浏览器中查看

localStorage.removeItem(键)
真实的清除数据

localStorage.clear();
全部清除;

localStorage.getItem(键/key）
返回值：值-->JSON字符串
28.--------------------------------------------------------------------------------------
JSON格式的字符串
{"name":"zs","age":"20"};

JSON.parse(JSON字符串);
将JSON字符串转为数组

JSON.stringify(数组);
将数组转换为JSON字符串
29.-----------------------------------------------------------------------------------------
渲染:把拿到的数据通过js显示在html界面上;

抽象数据/阿里百秀:
整个列表:数组;
单条新闻:对象;有属性,属性值就是页面要展示的信息;

**********************************************************************************************************************************抽象数据
为什么要抽象数据:
页面HTML + CSS
把HTML改造,通过JS把重复的循环遍历出来
把看到的每条数据抽象为数据格式{},整个列表:[];
适当的把抽象出来的数据,把数据的key名字和格式与后台约定

30.----------------------------------------------------------------------------------------
keyCode 键盘键码

enter键码----->13
当键盘按下时:
var ipt = document.querySelector("#text");
ipt.onkeyDown = function (e) {
console.log(e.keyCode);
}

组合键:
e.ctrlKey----->ctrl是否按下

31.-----------------------------------------------------------------------------------------
删除数组中的某一项

splice();
参数1:从哪个下标开始;
参数2:删除几个数据;
参数3:被替换的数据(不写);
 
32.-----------------------------------------------------------------------------------------
时间戳:
.Date.now();

id:
时间戳*随机数
.Date.now()*Match.random();

将id与元素绑定
.setAttribute("ID",ID);

33.-------------------------------------------------------------------------------------------

********************************************************************************************************************BOM

computed:计算后(浏览器)
var style = window.getComputedStyle(元素对象/DOM节点);
返回的就是这个DOM节点的计算后的样式;
可获取行内属性,返回都是字符串

写法:
CSS:font-size; JS:fontSize;

div.offsetWidth;
div.offsetHeight;
获取的是实际的宽度和高度;

div.offsetLeft;
div.offsetHeight;
定位父亲,没有则往上找直到body;

offset返回的都是数字


	|---------onload页面加载之后
	|---------setTimeout一次性定时器
	|---------setinterval定时器
BOM------|---------location.href 改变地址栏的地址
	|---------localStorage小U盘 本地存储 --直接存入复杂数据不报错 会隐式转换为字符串

34.---------------------------------------------------------------------------------------------

注册动画事件只能使用.addEventListener("transitionend",function(){});

35.---------------------------------------------------------------------------------------------
offsetWidth = border + padding + windth;
clientWidth = padding + width;

.属性 = ["属性"]

36.---------------------------------------------------------------------------------------------
******************************************************************************************************************************************移动端
touchstart-->手指触摸到屏幕的时候触发
touchmove-->手指触摸到屏幕,移动的过程中触发
touchend-->会在手指离开屏幕的瞬间触发

TouchList

e.touches 屏幕上的点
e.targetTouches 元素上面的触发点
e.changedTouches 最后离开屏幕的值/可以识别手指最后在哪里离开

原生JS没有手势事件
引入Ztpto
touch.js手势都是别人封装好的

37.--------------------------------------------------------------------------------------------
script一般情况下放在body HTML结构下面
DOM树原理
需要等待DOM全部渲染完成
https://github.com/zc3hd/demo_Interview/tree/master/src_webapp/modules
38.-------------------------------------------------------------------------------------------

<select id="test"  name="">   
  <option   value="1">text1</option>   
  <option   value="2">text2</option>   
 </select>

获取option中的value属性;
.my.value;
获取option中的元素
.my.options

javascript原生的方法
  1:拿到select对象： var  myselect=document.getElementById("test");
  2:拿到选中项的索引：var index=myselect.selectedIndex ;     // selectedIndex代表的是你所选中项的index
  3:拿到选中项options的value：  myselect.options[index].value;
  4:拿到选中项options的text：  myselect.options[index].text;






























