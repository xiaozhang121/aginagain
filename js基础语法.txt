.call
.apply
递归深拷贝
时间冒泡
阻止事件冒泡
为元素绑定事件

停止函数用return;
停止循环用break;

转布尔值false:0, "" ,null ,undefined, NaN

ctrl + H (内容中替换谁写谁)
替换img中的src:
<img src = 
替换
<img data-lazy-src=

Boostrap前端框架引入:
必须将要写的html标签放在.container盒子中/容器盒子 再加入其设定好的类名

Math.min()参数为要比较的数 不能为数组
1.-----------------------------------------------------------
var a = NaN;
var b = typeof(a);
var b = typeof a;
空格+a; 两种用法
console.log(b);
typeof() 判断数据类型
2.------------------------------------------------------------
var a = 10;
a = String(a);
console.log(a);
         ||
var a = 10;
a = a.toString();
console.log(a);
(不能转null与undefine)
3.-------------------------------------------------------------
==转成相同的数据类型 再看值是否相同
===直接看数据类型 如果不同 直接返回false
4.-------------------------------------------------------------
array数组:
push 从后面添加
pop 从后面删除
unshift 从数组前面添加元素
shift 从数组前面删除元素
splice 在数组任何位置进行增删改
arr.splice(3,1,"-----------新的数据--------------");
第一个参数 开始的下标 第二个参数 删除的个数 后面的参数 要添加的数据
5.--------------------------------------------------------------
字符串转数组:
split("分隔符");
数组转字符串:
arr.join("分隔符");
6.--------------------------------------------------------------
array查找元素:
indexOf("查找的数据/字符串的位置")
返回的是数据的下标/场景:是否有敏感字
(last indexOf):从后面开始找
str.charAt(2);获取指定位置的字符

findIndex:
arr.findIndex(

function(item) {
return item ===20;
});

返回满足第一个元素的下标
7.----------------------------------------------------------------
array遍历:
arr.forEach(item,index,arr);
item: 每个数据
index:下标
arr:当前数组
fliter:
对当前的数组过滤
var arr1 = arr.filter(
function (item,indesx,arr){
return item ==10;
}
)
输出为10的数组
8.---------------------------------------------------------------
array的拼接:
concat(可拼接多个数据,单个数据,字符串);
拼接后返回新的字符串,没有对原字符串进行操作;

array的截取:
slice(1,4) 第一个参数从哪个下标开始 截取到后一个参数为止

substring/slice截取字符串
str.slice(0,3);/substring(0,3);
9.---------------------------------------------------------------
break只能用在for' while循环中;
10.--------------------------------------------------------------
null复杂数据类型
11.--------------------------------------------------------------
内置对象:js系统自带的对象,Array,Object,Date,Math,RegExp(正则表达式);
浏览器的对象:window;
自定义对象:自己定义的构造函数创建的对象;
DOM对象:通过DOM方式获取的对象;
jQuery对象:通过jQuery方式获取的对象;

12.-------------------------------------------------------------
BOM包含DOM

json很重要 

字符串也可以遍历 可以创建一个新数组 然后遍历字符串 再将遍历后的结果放进数组中 这样就得到了拥有所有单个字符串的数组

13.-------------------------------------------------------------
window.confirm()
弹出框 返回值为布尔值



