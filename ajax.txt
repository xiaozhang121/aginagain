1.----------------------------------------------------------------------------------------------------------
基本概念:
服务器:负责存放和对外提供资源的电脑/任意计算机都能成为服务器/必须安装特定的服务端软件;

URL地址:统一资源定位符/网址;
组成部分:
http://:通信协议/规则;
www.xxx.com:域名/服务器名称;
xxxxxxxxxx/p/3244.html:资源在服务器上具体的存放位置;

通信过程(请求+处理+响应):
客户端:
打开浏览器->输入url->向服务器发出资源请求
web服务器:
接到请求->处理请求,找到资源->响应(发送)给客户端

Request请求
response响应

网页资源:
文字内容
img图片
audio音频
video视频

请求类型:get/post
语义区别:(get一般用于获取(比如搜索栏搜索)/post一般用于提交(比如组成表提交))
get用来获取资源请求操作
//获取图片 音视频 js  css 地址栏输入地址 location.href a标签跳转...
post用来发送资源的请求操作
//表单提交(get,post均可) ajax也可以发送get和post请求

可发送数据大小有区别:
get请求受限制于浏览器对url的控制,2m左右;
post请求理论上无大小限制(不走地址栏),受限制于服务端实际的需求和处理能力

可发送的数据格式有区别:
get请求只能发送文本格式数据
post请求不限制(比如上传头像..),服务器会根据业务需求进行处理

统一特点:
都会出现跳转(有些是无法干预的);
实际页面制作时 很多功能虽然请求了新的数据 但是并没有出现跳转;
传统的请求方式无法满足现代网页的所有功能(比如搜索栏的智能联想),需要新的请求方式ajax;

2.--------------------------------------------------------------------------------------------------
Ajax

ajax(异步JavaScript和XML);
XML类似于HTML标签(一种数据格式,一般被json格式取代);
通俗理解:利用XMLHttpRequest对象和服务器进行数据交互的方式就是Ajax;
特点:无需刷新页面,也可以进行请求响应处理;


var xhr = new XMLHttpRequest();
相当于创建一个ajax的实例对象;
xhr.open();
xhr.send();

3.------------------------------------------------------------------------------------------------------
同步和异步概念:

同步:同步任务:代码按顺序从上往下一个一个执行;
异步:异步代码一定在同步代码执行之后再执行(定时器);
为什么有异步任务:
因为有些任务较为耗时,或执行时间不确定,为了避免阻塞后续代码,设置为异步任务;

常见异步任务:
定时器;
Ajax(向网络请求资源需要时间);

for (var i = 0;i<10;i++){
setTimeout(function(){
log(i)
},0)
};
输出全是10 因为是异步任务 等for执行完毕在执行定时器




js是弱类型语言(var num当前变量中可以存放任意类型的意思)
是动态语言(读取到该内容时,当前是什么类型就是什么类型)
是一种脚本语言(一般以文本形式存在)
基于对象的语言(面向对象的语言es5/es6/封装继承多态)
基于原型的语言
是事件驱动的语言
是一种单线程(只有一个人干活)的语言:因为js中具有DOM操作 例如修改元素颜色 单个线程操作不会与其他线程产生干扰,es5以后js也出现了多线程的概念,但是有限制,多个线程只能进行辅助操作;
多线程(好多人干活):

4.-------------------------------------------------------------------------------------------------------
$.get(url,[data],[callback]);
url必写;
callback回调函数;

5.---------------------------------------------------------------------------------------------------------
.get/.post只是掉用了$.ajax()实现的功能;

6.---------------------------------------------------------------------------------------------------------------
接口:应用程序编程接口(提供应用程序编程能力的示例API)
WebAPI:浏览器提供,与web开发相关的一些API,本质上即是一堆属性的方法;
内置对象API:js解析器提供的,用于js基础语法操作的一些API,本质上是一堆属性的方法;

浏览器的两个主要构成部分:
1内核(渲染引擎):html和css渲染,WebAPI;
2js解析器(执行ECMAScript);

规范相关内容:
w3c规范(html,css,WebAPI)/ECMA规范(语法 含内置对象);

数据接口:数据接口是能够提供数据的一种实物(表现形式就是一个URL);
简单来说能提供数据的一个URL地址,就被称为数据接口/前后端交互时的接口就是数据接口;

7.-----------------------------------------------------------------------------------------------------------------

art-template模板引擎;
传统方式的字符串拼接比较麻烦,html与js书写在一起不方便维护;

不会解析html标签/如果需要解析 需要在内容中加@-->{{@html}}

使用步骤:
1 用用template-web.js

2 准备数据(通常为请求得到的数据)

3 准备模板 
使用script标签 设置type为text/template,设置id
内部书写需要的结构内容
结合模板语法进行操作

4 调用template方法梳理
template(id名,数据)
返回值为将数据和模板结合的字符串
var htmlstr = template('template', data);
document.getElementById('box').innerHTML = htmlstr;


可以添加判断条件
{{ if age >18 }}
<p>此人成年了</p>
{{else}}
<p>此人未成年
{{/if}}

{{each xx}}遍历

{{each xx v i}}
{{v}} {{i}}



{{valute}} {{index}} 

{{each obj}}
        <p>{{$value}}</p>
 {{/each}}


{{each obj}}
        {{if $value>8}}
        <p>{{$value}}</p>
        {{/if}}
        {{/each}}
添加判断

8.-------------------------------------------------------------------------------------------------------------------------------
过滤器
template.defaults.imports.过滤器名称 = function(time){
var date = new Date(time);
var result = date.getFullYear().....;
reutrn result;
}

template.defaults.imports.temp = function () {
            var date = new Date();
            var res = date.getFullYear() + '-' + date.getMonth() + '-' + date.getDate() + ' ' + date.getHours() + ':' + date.getMinutes() + ':' + date.getSeconds();
            return res;
        }

9.--------------------------------------------------------------------------------------------------------------------------------

正则.test() 匹配:检测字符串是否满足某些规则;
字符串.replace() 替换;

提取:将满足规则的内容取出
字符串.match()
*****************************************正则.exec()----->每次使用都会累计;

var str = //;定义一个正则;


*		重复0次或更多次【>=0次】/^[a-z]*$/

+		重复1次或更多次【>=1次】【/^[a-z]+$/】

?		重复0次或1次

{n}		重复n次

{n,}	重复n次或更多次

{n,m}	重复n到m次
注意：{n,m}n和m之间不准有空格

边界符：^，$
中括号：[]：被中括号包含的东西只能选1个
量词符：*，+，?，{n,m}	

match和exec的小区别:
用法区别
功能区别:
match可以一次提交所有的数据,但是没法分组
exec每次取一个,可以分组	


\w 匹配任意字符

\d 匹配0-9之间的任一数字,相当于[0-9];

\D 匹配0-9以外的任一数字,相当于[^0-9];

\w 匹配任意的字母 数字 下划线的字符,相当于[A-Za-z0-9_];

\W 除所有字母 数字 下划线以外的字符,相当于[^A-Za-z0-9_];

\s 匹配空格(包括换行符 制表符 空格符),相当于[\t\r\n\v\f];

\S 相反 

10.-------------------------------------------------------------------------------------------------------------------
axios:和jquery没有关系

axios对响应的res进行了包装 之前jQuery中的 res 相当于axios中的res.data;

get写法:
 axios.get('http://www.liulongbin.top:3006/api/getbooks',{
        params:{
            id:2
        }
    })
    .then(function(){
        console.log(res.data);   
    })

post写法:
   axios.post('http://www.liulongbin.top:3006/api/post', { name: 'dagou', age: 18 }).then(function () {
            console.log(1);
        })

ajax写法/需要引用axios文件:
axios({
method:'POST',
url:'http://www.liulongbin.top:3006/api/get',
params:{
name:'jack',
age:18
})
.then(function(res){
console.log(res.data);
})


})
11.----------------------------------------------------------------------------------------
同源策略:
两个页面的协议(http) 域名(www..) 端口(默认80端口)都相同,则两个页面具有相同的源,称为同源地址;

不是同源无法直接获取/发送数据数据

JSONP
12.------------------------------------------------------------------------------------------
节流:函数节流 减少某些操作的触发速度/触发之后忽略事件等待时间倒计时之后再刷新/开关思想/防止触发太多次;
防抖:触发之后立即重新刷新倒计时时间;
区别:
1防抖是当指定时间内再次触发,使用新触发的操作再次重新计时;
2节流是在指定间隔时间内再次触发,新操作会被忽略;
13.----------------------------------------------------------------------------------------
*****************************************************************************************************************HTTP
HTTP请求消息的组成部分:
请求行 请求头部 空行 请求主体;
location内置属性:
Host主体地址
User-Agent:
port:

请求报文:
请求行: 请求方式 请求地址 协议和版本;
请求头:用来保存客户端的相关信息(版本 User-Agent计算机版本/Chrome浏览器版本) 浏览器提供
空行
请求体:发送的请求参数:
get请求参数在url中发送 请求体为空
post请求的参数在请求体中 所以需要设置Content-Type;

响应报文:
状态行/响应行:协议和版本 状态码 状态文本
响应头:用来保存服务端的相关信息(有的是服务器自动设置的,有的是后端自己设置的);
Content-Type:响应体的内容类型;
空行:
响应体:
服务端发给客户端的响应内容(无论什么请求方式,响应的数据都在响应体中保存);
在jQuery中接收的res就是响应体

请求方式:
GET(查询);
POST(新增);
PUT(修改);
DELETE(删除);

HTTP响应状态码:通过一些数字办事本次请求的状态:除了状态码还会配有状态文本
1**信息,服务器收到请求,需要请求者继续执行操作;
2**成功,操作被成功(200)接收并处理;
3**重定向(请求a.html,服务器将请求转为了b.html)(304缓存/cache),需要进一步的操作完成请求(跳转);
4**客户端错误(404没找到/403),请求包含语法错误或无法完成请求;
5**服务器错误,服务器在处理请求的过程中发生了错误(后端);

版本管理软件:
git 大多公司使用的工具/分布式;
svn 集中式

git命令:
	git bash(主要掌握的方式)
图形化界面:
	tortoiseGit
	git GUI
	sourceThree
	开发工具总集成

gitbash常用命令

新建目录:
$ mkdir dir1 dir2...
进入目录:
$ cd dir1
返回上级目录:
$ cd .. 

14.-------------------------------------------------------------------------------------------------
git使用:

$git add .//添加指令
 $git commit -m"第二次修改"  //添加版本名称
 $git log  //获取列表        git log --oneline只能获取当前和之前的版本
 $git reflog  //获取之后的版本号
 $git reset --hard  //切换版本


如果当前处于旧的版本 并且打开了gitbash,可以通过git reflog 的方式查看所有的版本信息
再从一堆版本中找到具有commit的部分进行穿梭

git文件的状态查看:
git status
untracked 未跟中的文件/某个文件是新出现在工作目录中,以前没有被add或commit
modified 修改过的文件/某个文件以前提交过但是又进行了修改
staged:已暂存的文件(add过但是没有commit的文件)
committed:已提交的文件(进行了commit的文件)

git分支:
master
git branch 查看所有分支列表
git branch分支名 创建某个分支
git checkout 分支名 切换到某个分支
git checkout -b分支名 创建并切换到某个分支
git branch -d 分支名 删除某个分支
git merge 分支名 合并分支
例如 希望将dev合并到master中 需要切换到master 然后再git merge dev

15.-------------------------------------------------------------------------------------------------------
jQuert中:
设置空数组后 在将ajax获取到的数据push到新的数组中 再输出 此时的数组为空 因为ajax是异步进行的 所以后面的操作获取到的依然是空数组
解决方式:
将ajax改为同步:
async:false;同步
默认为:true,异步
16.--------------------------------------------------------------------------------------------------------------
页面不刷新实现跳转使用iframe标签
17.-----------------------------------------------------------------------------------------------------------
图片本地预览:
使用change事件监测用户的文件选择操作;
通过URL.creatObjectURL()进行本地图片地址获取

URL.createObjectURL($(this)[0].files[0]);

.serialize() 将表单数据变成名 = 值&名

.reset();清空表单/DOMl

<input type = 'hidden'> 隐藏域

发送表单时 必须将表单改成 名=值&名=值的格式     用.serialize();方法

serialize() 方法通过序列化表单值，创建 URL 编码文本字符串
serialize()和FormData对象都可将表单数据序列化，后通过ajax异步提交 ，序列化表单就是将form表单中所有name属性序列化成KEY-VALUE的形式，提交到后台，后台以对象相应的字段接收


FormData是HTML5对象，目前可兼容大多主流的浏览器，但不兼容低版本IE浏览器。(发送图片时用)
与普通的Ajax相比，使用FormData 的最大优点就是可以异步上传二进制文件。

18.-------------------------------------------------------------------------------------------------------------
iframe标签的使用:
<button id='btn'>通过修改iframe的src切换展示的页面</button>
<iframe id='iframe' src='http://www.baidu.com' frameborder = '0></iframe>

document.getElementById('btn').onclick = function(){
document.getElementById('iframe').src = 'http://www.taobao.com';
}